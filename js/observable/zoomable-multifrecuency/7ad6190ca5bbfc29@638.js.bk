// https://observablehq.com/@likecarter/u-s-treasury-general-account-comparison-with-the-s-p500@638
import define1 from "./a33468b95d0b15b0@692.js";

export default function define(runtime, observer) {
  const main = runtime.module();
  const fileAttachments = new Map([["WTREGEN.csv",new URL("./files/d2cb9c541465b728217dffabf5c89a19b2880a405df204b1d6c98da33fc537c98a48bce25a3597b9105a1b4c19de6248447b3d7db9950259f5d7d7408e96dfed",import.meta.url)],["^GSPC@1.csv",new URL("./files/8b4846fa8214c2b93a7161107644f25248a7414480d64079cd4436af48932cd1d59fd001b085af27f4a73db09e0b7c9b70d599affc9ec4d7f68a48815012e2ad",import.meta.url)]]);
  main.builtin("FileAttachment", runtime.fileAttachments(name => fileAttachments.get(name)));
  main.variable(observer()).define(["md"], function(md){return(
md`# U.S. Treasury General Account comparison with the S&P500  

The treasury data includes deposits with F.R. Banks, other than reserve balances. The S&P data is from [Yahoo Finance](https://finance.yahoo.com/lookup)

This [area chart](/@d3/area-chart) uses brushing to specify a focused area. Drag the gray region to pan, or brush to zoom.`
)});
  main.variable(observer()).define(["legend","d3","scheme"], function(legend,d3,scheme){return(
legend({
  color: d3.scaleOrdinal(["TGA", "^GSPC"], scheme)
})
)});
  main.variable(observer("chart")).define("chart", ["d3","width","height","DOM","margin","sp500","scheme","data","xAxis","yAxis","area","yAxisSp","areaSp"], function(d3,width,height,DOM,margin,sp500,scheme,data,xAxis,yAxis,area,yAxisSp,areaSp)
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, width, height])
    .style("display", "block");

  const clipId = DOM.uid("clip");

  svg
    .append("clipPath")
    .attr("id", clipId.id)
    .append("rect")
    .attr("x", margin.left)
    .attr("y", 0)
    .attr("height", height)
    .attr("width", width - margin.left - margin.right);

  const gx = svg.append("g");

  const gy = svg.append("g");

  const gySp = svg.append("g");

  const backgroundPath = svg
    .append("path")
    .datum(sp500)
    .attr("clip-path", clipId)
    .attr("opacity", 0.6)
    .attr("fill", scheme[1]);

  const path = svg
    .append("path")
    .datum(data)
    .attr("clip-path", clipId)
    .attr("opacity", 0.6)
    .attr("fill", scheme[0]);

  return Object.assign(
    svg.node(),
    {
      update(focusX, focusY) {
        gx.call(xAxis, focusX, height);
        gy.call(yAxis, focusY, data.y);
        path.attr("d", area(focusX, focusY));
      }
    },
    {
      updateSp(focusX, focusY) {
        gx.call(xAxis, focusX, height);
        gySp.call(yAxisSp, focusY, sp500.y);
        backgroundPath.attr("d", areaSp(focusX, focusY));
      }
    }
  );
}
);
  main.variable(observer("viewof focus")).define("viewof focus", ["d3","width","focusHeight","margin","x","xAxis","data","scheme","area","y","sp500","areaSp","ySp"], function(d3,width,focusHeight,margin,x,xAxis,data,scheme,area,y,sp500,areaSp,ySp)
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, width, focusHeight])
    .style("display", "block");

  const brush = d3
    .brushX()
    .extent([
      [margin.left, 0.5],
      [width - margin.right, focusHeight - margin.bottom + 0.5]
    ])
    .on("brush", brushed)
    .on("end", brushended);

  const defaultSelection = [
    x(d3.utcYear.offset(x.domain()[1], -1)),
    x.range()[1]
  ];

  svg.append("g").call(xAxis, x, focusHeight);

  svg
    .append("path")
    .datum(data)
    .attr("opacity", 0.6)
    .attr("fill", scheme[0])
    .attr("d", area(x, y.copy().range([focusHeight - margin.bottom, 4])));

  svg
    .append("path")
    .datum(sp500)
    .attr("opacity", 0.6)
    .attr("fill", scheme[1])
    .attr("d", areaSp(x, ySp.copy().range([focusHeight - margin.bottom, 4])));

  const gb = svg
    .append("g")
    .call(brush)
    .call(brush.move, defaultSelection);

  function brushed() {
    if (d3.event.selection) {
      svg.property(
        "value",
        d3.event.selection.map(x.invert, x).map(d3.utcDay.round)
      );
      svg.dispatch("input");
    }
  }

  function brushended() {
    if (!d3.event.selection) {
      gb.call(brush.move, defaultSelection);
    }
  }

  return svg.node();
}
);
  main.variable(observer("focus")).define("focus", ["Generators", "viewof focus"], (G, _) => G.input(_));
  main.variable(observer()).define(["focus","d3","data","chart","x","y"], function(focus,d3,data,chart,x,y)
{
  const [minX, maxX] = focus;
  const maxY = d3.max(data, d =>
    minX <= d.date && d.date <= maxX ? d.value : NaN
  );
  chart.update(x.copy().domain(focus), y.copy().domain([0, maxY]));
}
);
  main.variable(observer()).define(["focus","d3","sp500","chart","x","ySp"], function(focus,d3,sp500,chart,x,ySp)
{
  const [minX, maxX] = focus;
  const maxY = d3.max(sp500, d =>
    minX <= d.date && d.date <= maxX ? d.value : NaN
  );
  chart.updateSp(x.copy().domain(focus), ySp.copy().domain([0, maxY]));
}
);
  main.variable(observer("data")).define("data", ["d3","FileAttachment"], async function(d3,FileAttachment){return(
Object.assign(
  d3
    .csvParse(await FileAttachment("WTREGEN.csv").text(), d3.autoType)
    .map(({ DATE, WTREGEN }) => ({ date: DATE, value: WTREGEN })),
  { y: "TGA (Billions)" }
)
)});
  main.variable(observer("sp500")).define("sp500", ["d3","FileAttachment"], async function(d3,FileAttachment){return(
Object.assign(
  d3
    .csvParse(await FileAttachment("^GSPC@1.csv").text(), d3.autoType)
    .map(({ date, close }) => ({ date, value: close })),
  { y: "^GSPC" }
)
)});
  main.variable(observer("area")).define("area", ["d3"], function(d3){return(
(x, y) => d3.area()
    .defined(d => !isNaN(d.value))
    .x(d => x(d.date))
    .y0(y(0))
    .y1(d => y(d.value))
)});
  main.variable(observer("areaSp")).define("areaSp", ["d3"], function(d3){return(
(x, y) =>
  d3
    .area()
    .defined(d => !isNaN(d.value))
    .x(d => x(d.date))
    .y0(y(0))
    .y1(d => y(d.value))
)});
  main.variable(observer("x")).define("x", ["d3","data","margin","width"], function(d3,data,margin,width){return(
d3.scaleUtc()
    .domain(d3.extent(data, d => d.date))
    .range([margin.left, width - margin.right])
)});
  main.variable(observer("y")).define("y", ["d3","data","height","margin"], function(d3,data,height,margin){return(
d3.scaleLinear()
    .domain([0, d3.max(data, d => d.value)])
    .range([height - margin.bottom, margin.top])
)});
  main.variable(observer("ySp")).define("ySp", ["d3","sp500","height","margin"], function(d3,sp500,height,margin){return(
d3
  .scaleLinear()
  .domain([0, d3.max(sp500, d => d.value)])
  .range([height - margin.bottom, margin.top])
)});
  main.variable(observer("xAxis")).define("xAxis", ["margin","d3","width"], function(margin,d3,width){return(
(g, x, height) => g
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0))
)});
  main.variable(observer("yAxis")).define("yAxis", ["margin","d3"], function(margin,d3){return(
(g, y, title) =>
  g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y))
    .call(g => g.select(".domain").remove())
    .call(g =>
      g
        .selectAll(".title")
        .data([title])
        .join("text")
        .attr("class", "title")
        .attr("x", -margin.left)
        .attr("y", 10)
        .attr("fill", "currentColor")
        .attr("text-anchor", "start")
        .text(title)
    )
)});
  main.variable(observer("yAxisSp")).define("yAxisSp", ["width","margin","d3"], function(width,margin,d3){return(
(g, y, title) =>
  g
    .attr("transform", `translate(${width - margin.right},0)`)
    .call(d3.axisRight(y))
    .call(g => g.select(".domain").remove())
    .call(g =>
      g
        .selectAll(".title")
        .data([title])
        .join("text")
        .attr("class", "title")
        .attr("x", 0)
        .attr("y", 10)
        .attr("fill", "currentColor")
        .attr("text-anchor", "start")
        .text(title)
    )
)});
  main.variable(observer("margin")).define("margin", function(){return(
{ top: 20, right: 40, bottom: 30, left: 40 }
)});
  main.variable(observer("height")).define("height", function(){return(
440
)});
  main.variable(observer("focusHeight")).define("focusHeight", function(){return(
100
)});
  main.variable(observer("scheme")).define("scheme", function(){return(
["#3182bd", "#7DC0A7"]
)});
  const child1 = runtime.module(define1);
  main.import("legend", child1);
  main.variable(observer("d3")).define("d3", ["require"], function(require){return(
require("d3@5")
)});
  return main;
}
